{"version":3,"sources":["App.js","index.js"],"names":["Task","params","react_default","a","createElement","className","task","done","onClick","_","toggleDoneState","previewTask","title","Tasks","tasks","filter","map","Preview","react_contenteditable_default","html","onChange","ev","updateTask","target","value","body","Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","createTask","preview","newTask","push","forceUpdate","property","newValue","console","log","_this2","length","addTask","p","n","t","React","Component","ReactDOM","render","App","document","getElementById"],"mappings":"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","file":"static/js/main.fc36c8ef.chunk.js","sourcesContent":["import React from 'react';\nimport ContentEditable from 'react-contenteditable';\n\nfunction Task(params) {\n  return (\n    <li className=\"tasks__item\">\n      <span\n        className={\" tasks__check \" + (params.task.done ? \" tasks__check--checked \" : \"\")}\n        onClick={_ => params.toggleDoneState(params.task)}></span>\n      <span\n        className=\"tasks__label\"\n        onClick={_ => params.previewTask(params.task)}>{params.task.title}</span>\n    </li>\n  );\n}\n\nfunction Tasks(params) {\n  return (\n    <div className=\"tasks col-xs-12 col-md-6\">\n      <ul className=\"tasks__list\">\n        { params.tasks\n            .filter(task => !task.done)\n            .map(task => <Task task={task} previewTask={params.previewTask} toggleDoneState={params.toggleDoneState} />)\n        }\n      </ul>\n\n      <ul className=\"tasks__list tasks__list--done\">\n          { params.tasks\n              .filter(task => task.done)\n              .map(task => <Task task={task} previewTask={params.previewTask} toggleDoneState={params.toggleDoneState} />)\n          }\n      </ul>\n    </div>\n  );\n}\n\nfunction TopTasks(params) {\n\n}\n\nfunction Preview(params) {\n  if (!params.task) {\n    return (\n      <div className=\"preview col-xs-12 col-md-6\">\n        Click on a task to preview...\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"preview col-xs-12 col-md-6\">\n      <ContentEditable className=\"preview__headline\"\n        html={params.task.title}\n        onChange={ev => params.updateTask(\"title\", ev.target.value, params.task)}\n        />\n      <ContentEditable className=\"preview__body\"\n        html={params.task.body}\n        onChange={ev => params.updateTask(\"body\", ev.target.value, params.task)}\n        />\n    </div>\n  );\n}\n\nclass Todo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [\n        this.createTask(\"dummy Task\"),\n        this.createTask(\"another Task\")\n      ],\n      preview: null,\n    };\n  }\n\n  createTask(title, body) {\n    return {\n      title: title || \"New task\" ,\n      body: body || \"New tasks body\",\n      done: false,\n    }\n  }\n\n  addTask() {\n    const newTask = this.createTask();\n    this.state.tasks.push(newTask);\n    this.state.preview = newTask;\n    this.forceUpdate();\n  }\n\n  toggleDoneState(task) {\n    task.done = task.done ? false : true;\n    this.forceUpdate();\n  }\n\n  previewTask(task) {\n    this.state.preview = task;\n    this.forceUpdate();\n  }\n\n  updateTask(property, newValue, task) {\n    console.log(\"updated\");\n    task[property] = newValue;\n    this.forceUpdate();\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"hdl-h1 page__title\"> List your TODOs </h1>\n        <h2 className=\"hdl-h3 page__subtitle\">\n          You have {this.state.tasks.length} items in your list\n          <button className=\"btn page__add-button\" onClick={_ => this.addTask()} >Add Task</button>\n        </h2>\n        <div className=\"row page__content\">\n          <Tasks\n            tasks={this.state.tasks}\n            addTask={ _ => this.addTask() }\n            previewTask={ task => this.previewTask(task) }\n            toggleDoneState={ task => this.toggleDoneState(task)} />\n          <Preview\n            task={this.state.preview}\n            updateTask={(p, n, t) => this.updateTask(p, n, t)}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Todo;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}